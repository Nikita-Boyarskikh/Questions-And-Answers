#!/bin/bash

#---------–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é----------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
root_path='/WEB'
project_name='ask_boyarskikh'
main_log_file='log/main.log'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ django
allowed_host='127.0.0.1'
secret_key=')01xqqf#tzq-1yh$uzs8ckt*r7h6061ngn2$hyxxhgnwi2cti'
admin_name='Nikita-Boyarskikh'
admin_pass='Ybrbnf02'
admin_email='N02@yandex.ru'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ gunicorn
master='true'
processes='4'
socket='wsgi.sock'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_name='ask_boyarskikh_db'
db_user='ask_boyarskikh'
db_pass='12345'
db_host='127.0.0.1'
db_port='3306'

superuser='root'
superpass='Ybrbnf02'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
name='Nikita-Boyarskikh'
email='N02@yandex.ru'

#----------–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º en_US.utf8 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)----------

export LANG=

#----------–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤----------

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
help_page() {
	echo
	echo -e "[project]:"
	echo -e "\t-R $root_path \t-- path to root directory of deploying project"
	echo -e "\t-M $main_log_file \t-- relation path to main log of your project"
	echo -e "[gunicorn]:"
	echo -e "\t-m $master \t-- True/False. True if this gunicorn process will be master-process"
	echo -e "\t-P $processes \t-- number of starting workers"
	echo -e "\t-s $socket \t-- path to your main application unix socket"
	echo -e "[django]:"
	echo -e "\t-A $allowed_host \t-- allowed host for django"
	echo -e "\t-S $secret_key \t-- secret key for django"
	echo -e "[database]:"
	echo -e "\t-n $db_name \t-- name of database"
	echo -e "\t-u $db_user \t-- user name of database"
	echo -e "\t-x $db_pass \t-- password for user of database"
	echo -e "\t-h $db_host \t-- host of database"
	echo -e "\t-p $db_port \t-- port of database"
	echo -e "\t-U $superuser \t-- superuser name of database"
	echo -e "\t-X $superpass \t-- password for superuser of database"
	echo -e "[admin]:"
	echo -e "\t-i $name \t-- your name"
	echo -e "\t-e $email \t-- your e-mail[0;39m"
}

echo "[1;39mServer will be create with next settings:"
help_page

#----------–£—Å—Ç–∞–Ω–æ–≤–∫–∞----------

# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
home_dir=$(pwd)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo -e "[1;39m\tInstalling dependenses for system...[0;39m"
if xargs apt-get -y install < conf/requirements.txt
then echo -e "[1;32m[OK][0;39m"
else echo -e "[1;31m[ERROR] can't install :([1;39m"; echo "exit...[0;39m"; exit 1
fi

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx
echo -e "[1;39m\tCreating and copying nginx files...[0;39m"
cp conf/nginx.conf conf/tmp.conf
echo "#app='$project_name'#" >> conf/tmp.conf
echo "#root='$root_path'#" >> conf/tmp.conf
unlink /etc/nginx/sites-enabled/$project_name
unlink /etc/nginx/sites-enabled/default
if cat conf/tmp.conf | perl conf/write_nginx_config.pl > /etc/nginx/sites-available/$project_name &&
ln -s /etc/nginx/sites-available/$project_name /etc/nginx/sites-enabled/$project_name && rm conf/tmp.conf
then echo -e "[1;32m[OK][0;39m"
else echo -e "[1;31m[ERROR] creating or copying nginx files failed :([1;39m"; echo "exit...[0;39m"; exit 1
fi

# –î–æ–±–∞–≤–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
# if cp conf/ssl.ini conf/tmp.ini && echo "$host" >> conf/tmp.ini &&
# echo "$email" >> conf/tmp.ini && cp -f conf/tmp.ini $root_path/ && rm conf/tmp.ini
# then echo -e "[1;32m[OK][0;37m"
# else echo -e "[1;31m[ERROR] can't configurate certificate :([1;39m"; echo "exit...[0;39m"; exit 1
# fi

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
# echo "Generating self-signed certificate..."
# if cat conf/ssl.ini | openssl req -newkey rsa:2048 -sha256 -nodes -keyout ssl/webhook_cert.key \
# 	-x509 -days 3650 -out ssl/webhook_cert.pem > /dev/null
# then echo -e "[1;32m[OK][0;37m"
# else echo -e "[1;31m[ERROR] can't generate certificate :([1;39m"; echo "exit...[0;39m"; exit 1
# fi

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—É—Ç–∏ –∏ –ø—Ä–∞–≤–∞
echo -e "[1;39m\tCopying files and creating paths...[0;39m"
if mkdir -p $root_path &&
cp $home_dir/conf/proxy_params /etc/nginx/ &&
cp $home_dir/conf/rc.local /etc/rc.local &&
mkdir $root_path/$project_name &&
cp $home_dir/conf/gunicorn.conf.py $root_path/$project_name/ &&
cp $home_dir/$project_name/manage.py $root_path/$project_name/ &&
cp $home_dir/$project_name/config.py $root_path/$project_name/ &&
mkdir $root_path/$project_name/log &&
mkdir $root_path/$project_name/app &&
mkdir $root_path/$project_name/$project_name &&
cp -r $home_dir/$project_name/$project_name/*.py $root_path/$project_name/$project_name/ &&
cp -r $home_dir/$project_name/app/*.py $root_path/$project_name/app/ &&
cp -r $home_dir/$project_name/app/uploads $root_path/$project_name/app/ &&
cp -r $home_dir/$project_name/app/templates $root_path/$project_name/app/ &&
cp -r $home_dir/$project_name/app/management $root_path/$project_name/app/ &&
mkdir $root_path/conf && cd $root_path &&
cp $home_dir/conf/config.ini $root_path/conf/config.ini &&
touch $root_path/$project_name/log/nginx_access.log && touch $root_path/$project_name/log/nginx_error.log
then echo -e "[1;32m[OK][0;39m"
else echo -e "[1;31m[ERROR] copying files or creating paths failed :([1;39m"; echo "exit...[0;39m"; exit 1
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ–º nginx
if nginx -t && service nginx start
then echo -e "[1;32m[OK][0;39m"
else echo -e "[1;31m[ERROR] configuration nginx failed :([1;39m"; echo "exit...[0;39m"; exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ python3
echo -e "[1;39m\tInstalling dependenses for app...[0;39m"
if pip3 install -r $home_dir/conf/pip_requirements.txt
then echo -e "[1;32m[OK][0;39m"
else echo -e "[1;31m[ERROR] can't install :([1;39m"; echo "exit...[0;39m"; exit 1
fi

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
echo -e "[1;39m\tSetting up database..."
echo -e "\tCreating user..."
echo -e "For superuser[0;39m"
if mysql -h $db_host -P $db_port -u $superuser -p$superpass -e "
    CREATE USER '$db_user'@'$db_host' IDENTIFIED BY '$db_pass';
    CREATE DATABASE $db_name DEFAULT CHARACTER SET 'utf8';
    GRANT ALL PRIVILEGES ON $db_name.* TO '$db_user'@'$db_host';
    FLUSH PRIVILEGES;"
then echo -e "[1;32m[OK][0;39m"
else
	echo -e "[1;31mMaybe this user or database already exists?"
	echo -e "exit...[0;39m"; exit 1;
fi

if cd $project_name && python3 manage.py makemigrations app
then
	if python3 manage.py migrate
	then
		if echo -e "from django.contrib.auth.models import User; User.objects.create_superuser('$admin_name', '$admin_email', '$admin_pass')" | python3 manage.py shell
		then
			echo -e "[1;32m[OK][0;39m"
		else
			echo -e "[1;31m[ERROR] can't create superuser :([1;39m"; echo "exit...[0;39m"; exit 1
		fi
	else
		echo -e "[1;31m[ERROR] can't migrate database :([1;39m"; echo "exit...[0;39m"; exit 1
	fi
else
	echo -e "[1;31m[ERROR] can't makemigrations database :([1;39m"; echo "exit...[0;39m"; exit 1
fi

#----------–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ----------

if python3 manage.py collectstatic --no-input -cl &&
cp -r $home_dir/$project_name/app/static $root_path/$project_name/app/
then
	# –î–∞—ë–º –ø—Ä–∞–≤–∞ www-data (—Å–µ—Ä–≤–µ—Ä–∞) –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
	if chown -R www-data $root_path &&
		gunicorn $project_name.wsgi:application
	then
		echo -e "[1;32m[OK] GUNICORN STARTED![0;39m"
		if service nginx start
		then
			echo -e "[1;32m[OK] NGINX STARTED![0;39m"
		else
			echo -e "[1;31m[ERROR] can't start nginx :([1;39m"; echo "exit...[0;39m"; exit 1
		fi
	else
		echo -e "[1;31m[ERROR] can't start gunicorn :([1;39m"; echo "exit...[0;39m"; exit 1
	fi
else
	echo -e "[1;31m[ERROR] can't collect static :([1;39m"; echo "exit...[0;39m"; exit 1
fi

echo -e "[1;32m[OK] DEPLOY SUCCESSFULL![0;39m"

exit 0
